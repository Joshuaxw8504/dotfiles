#+TITLE: Emacs config
#+PROPERTY: tangle yes
* Basic functionality
** Disable backups and auto-saves
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC
** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Async
Lets us use asynchronous processes wherever possible
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC
* Window manager
Currently using EXWM as my window manager
#+begin_src emacs-lisp
(use-package exwm
	     :ensure t
	     :config

	     (require 'exwm-config)
	     (exwm-config-default))
#+end_src

Simulation keys for common commands
#+begin_src emacs-lisp
      ;; simulation keys are keys that exwm will send to the exwm buffer upon inputting a key combination
      (exwm-input-set-simulation-keys
       '(
         ;; movement
         ([?\C-b] . left)
         ([?\M-b] . C-left)
         ([?\C-f] . right)
         ([?\M-f] . C-right)
         ([?\C-p] . up)
         ([?\C-n] . down)
         ([?\C-a] . home)
         ([?\C-e] . end)
         ([?\M-v] . prior)
         ([?\C-v] . next)
         ([?\C-d] . delete)
         ([?\C-k] . (S-end delete))
         ;; cut/paste
         ([?\C-w] . ?\C-x)
         ([?\M-w] . ?\C-c)
         ([?\C-y] . ?\C-v)
         ;; search
         ([?\C-s] . ?\C-f)))
#+end_src
* Controlling audio
Functions to control audio
#+begin_src emacs-lisp
(defconst volumeModifier "4")

(defun audio/mute ()
  (interactive)
  (start-process "audio-mute" nil "amixer" "sset" "Master" "toggle"))

(defun audio/raise-volume ()
  (interactive)
  (start-process "raise-volume" nil "amixer" "sset" "Master" (concat volumeModifier "%+")))

(defun audio/lower-volume ()
  (interactive)
  (start-process "lower-volume" nil "amixer" "sset" "Master" (concat volumeModifier "%-")))
#+end_src

Makes sure that XF86 keys work in exwm buffers as well
#+begin_src emacs-lisp
(dolist (k '(XF86AudioLowerVolume
	   XF86AudioRaiseVolume
	   XF86PowerOff
	   XF86AudioMute
	   XF86AudioPlay
	   XF86AudioStop
	   XF86AudioPrev
	   XF86AudioNext
	   XF86ScreenSaver
	   XF68Back
	   XF86Forward
	   Scroll_Lock
	   print))
(cl-pushnew k exwm-input-prefix-keys))
#+end_src

Keybindings to control volume
#+begin_src emacs-lisp
(global-set-key (kbd "<XF86AudioMute>") 'audio/mute)
(global-set-key (kbd "<XF86AudioRaiseVolume>") 'audio/raise-volume)
(global-set-key (kbd "<XF86AudioLowerVolume>") 'audio/lower-volume)
#+end_src

Makes alsamixer able to run in eshell
#+begin_src emacs-lisp
;;;(use-package eshell)
;;;  :init
;;;(require 'eshell)
;;;  (add-to-list 'eshell-visual-commands "alsamixer")
#+end_src

* Theme
Currently using zenburn theme
#+begin_src emacs-lisp
(use-package zenburn-theme
  :ensure t
  :init
    (load-theme 'zenburn t))
#+end_src
* Minor stylistic changes
Enables line numbers globally
#+begin_src emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
#+end_src
* Terminal
Vterm
#+begin_src emacs-lisp
(use-package vterm
  :ensure t
  :init
    (setq vterm-always-compile-module t)
    (defun run-in-vterm-kill (process event)
  "A process sentinel. Kills PROCESS's buffer if it is live."
  (let ((b (process-buffer process)))
    (and (buffer-live-p b)
         (kill-buffer b))))

(defun run-in-vterm (command)
  "Execute string COMMAND in a new vterm.

Interactively, prompt for COMMAND with the current buffer's file
name supplied. When called from Dired, supply the name of the
file at point.

Like `async-shell-command`, but run in a vterm for full terminal features.

The new vterm buffer is named in the form `*foo bar.baz*`, the
command and its arguments in earmuffs.

When the command terminates, the shell remains open, but when the
shell exits, the buffer is killed."
  (interactive
   (list
    (let* ((f (cond (buffer-file-name)
                    ((eq major-mode 'dired-mode)
                     (dired-get-filename nil t))))
           (filename (concat " " (shell-quote-argument (and f (file-relative-name f))))))
      (read-shell-command "Terminal command: "
                          (cons filename 0)
                          (cons 'shell-command-history 1)
                          (list filename)))))
  (with-current-buffer (vterm (concat "*" command "*"))
    (set-process-sentinel vterm--process #'run-in-vterm-kill)
    (vterm-send-string command)
    (vterm-send-return)))
)
#+end_src
* Evil
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :init
  (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1))

(use-package evil-collection
  :after evil
  :ensure t
  :config
  (evil-collection-init))
#+end_src
